// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	order "go-ddd/src/order"

	mock "github.com/stretchr/testify/mock"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: _a0
func (_m *OrderRepository) CreateOrder(_a0 order.Order) (*order.Order, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 *order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(order.Order) (*order.Order, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(order.Order) *order.Order); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(order.Order) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderById provides a mock function with given fields: id
func (_m *OrderRepository) GetOrderById(id int64) *order.Order {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderById")
	}

	var r0 *order.Order
	if rf, ok := ret.Get(0).(func(int64) *order.Order); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Order)
		}
	}

	return r0
}

// NewOrderRepository creates a new instance of OrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderRepository {
	mock := &OrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
